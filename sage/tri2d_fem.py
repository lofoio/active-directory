# -*- coding:utf-8 -*-
# This file was *autogenerated* from the file ./tri2d_fem.sage.
from sage.all_cmdline import *   # import sage library
_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_2p0 = RealNumber('2.0'); _sage_const_6 = Integer(6); _sage_const_0p0 = RealNumber('0.0'); _sage_const_0 = Integer(0); _sage_const_0p5 = RealNumber('0.5')#!/usr/bin/env sage

if __name__ == '__main__':
    import sys
    from sage.all import *

def Triangle2D3Node_Stiffness(E,NU,thick,ID,ic,celdes,xyz):
    """
    弹性模量 E,泊松比 NU,厚度 thick
    三个节点 i、j、k 的坐标 xi,yi,xj,yj,xk,yk
    平面问题性质指示参数 ID(1 为平面应力,2 为平面应变)
    """
    i,j,k = celdes[ic]
    xi,yi = xyz[i]
    xj,yj = xyz[j]
    xk,yk = xyz[k]
    A = (xi*(yj-yk) + xj*(yk-yi) + xk*(yi-yj))/_sage_const_2p0 
    betai = yj-yk
    betaj = yk-yi
    betam = yi-yj
    gammai = xk-xj
    gammaj = xi-xk
    gammak = xj-xi
    B = matrix(RR,_sage_const_3 ,_sage_const_6 ,[betai,_sage_const_0 ,betaj,_sage_const_0 ,betam,_sage_const_0 ,
                       _sage_const_0 ,gammai,_sage_const_0 ,gammaj,_sage_const_0 ,gammak,
                       gammai,betai,gammaj,betaj,gammak,betam])/(_sage_const_2 *A)
    if ID == _sage_const_1 :
        D = (E/(_sage_const_1 -NU*NU))*matrix(RR,_sage_const_3 ,_sage_const_3 ,[_sage_const_1 ,NU,_sage_const_0 ,
                                         NU,_sage_const_1 ,_sage_const_0 ,
                                         _sage_const_0 ,_sage_const_0 ,(_sage_const_1 -NU)/_sage_const_2 ])
    elif ID == _sage_const_2 :
        D = (E/(_sage_const_1 +NU)/(_sage_const_1 -_sage_const_2 *NU))*matrix(RR,_sage_const_3 ,_sage_const_3 ,[_sage_const_1 -NU,NU,_sage_const_0 ,
                                               NU,_sage_const_1 -NU,_sage_const_0 ,
                                               _sage_const_0 ,_sage_const_0 ,(_sage_const_1 -_sage_const_2 *NU)/_sage_const_2 ])
    return thick*A*B.transpose()*D*B

def Assembly(dof,KK,k,ns):
    noe = len(ns)
    for a in range(noe):
        for b in range(noe):
            l  = a*dof
            ll = ns[a]*dof
            r  = b*dof
            rr = ns[b]*dof
            for i in range(dof):
                for j in range(dof):
                    KK[ll+i,rr+j] += k[l+i,r+j]

def bcsolver(dof,bcsf):
    ns = []
    ps = []
    for t in bcsf:
        tt = (len(t)-_sage_const_1 )/_sage_const_2 
        for i in range(tt):
            if t[i*dof+_sage_const_1 ] == "x":
                n = int(t[_sage_const_0 ])*dof
                p = t[i*dof+_sage_const_2 ]
            elif t[i*dof+_sage_const_1 ] == "y":
                n = int(t[_sage_const_0 ])*dof+_sage_const_1 
                p = t[i*dof+_sage_const_2 ]
            ns.append(n)
            ps.append(float(p))
    return ns, ps

fname = sys.argv[-_sage_const_1 ] if len(sys.argv) == _sage_const_2  else "tri.txt"
with open(fname, 'r') as infile:
    cells,nodes,bcs = [int(x) for x in infile.readline().split()]
    celdes = []
    xyz    = []
    bcsf   = []
    for i in range(cells):
        celdes += [[int(x)-_sage_const_1  for x in infile.readline().split()]]
    for i in range(nodes):
        xyz += [[float(x) for x in infile.readline().split()]]
    for i in range(bcs):
        bcsf += [infile.readline().split()]
    dof = int(infile.readline().split()[_sage_const_1 ])
    thick = float(infile.readline().split()[_sage_const_1 ])
    E = float(infile.readline().split()[_sage_const_1 ])
    NU = float(infile.readline().split()[_sage_const_1 ])

KK = matrix(RR,dof*nodes,dof*nodes)

for i in range(cells):
    k = Triangle2D3Node_Stiffness(E,NU,thick,_sage_const_1 ,i,celdes,xyz)
    Assembly(dof,KK,k,celdes[i])

sub_k,sub_p = bcsolver(dof,bcsf)
KKs = KK.matrix_from_rows_and_columns(sub_k,sub_k)
sub_u = vector(sub_p)/KKs
U = [_sage_const_0p0 ]*nodes*dof
for i in range(len(sub_k)):
    U[sub_k[i]]=sub_u[i]
P = KK*vector(U)
## no need to transpose vectors
energy = _sage_const_0p5 *vector(U)*KK*vector(U)
work = vector(U)*P
poten = energy - work
print work,poten
