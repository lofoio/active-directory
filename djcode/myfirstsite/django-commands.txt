我推荐 O'reily 的那本 Xlib 程序设计书（我忘了名字了），虽然它很老，但是那上面讲解的 Xwindow 的工作原理一直都没有变过。
    Use 4 spaces per indentation level.
    Limit all lines to a maximum of 79 characters. For flowing long blocks of text (docstrings or comments), limiting the length to 72 characters is recommended.The preferred place to break around a binary operator is *after* the operator, not before it.
    class Rectangle(Blob):

        def __init__(self, width, height,
                     color='black', emphasis=None, highlight=0):
            if (width == 0 and height == 0 and
                color == 'red' and emphasis == 'strong' or
                highlight > 100):
                raise ValueError("sorry, you lose")
            if width == 0 and height == 0 and (color == 'red' or
                                               emphasis is None):
                raise ValueError("I don't think so -- values are %s, %s" %
                                 (width, height))
            Blob.__init__(self, width, height,
                          color, emphasis, highlight)
Imports
        Yes: import os
             import sys
        No:  import sys, os
      it's okay to say this though:
        from subprocess import Popen, PIPE
    - Imports are always put at the top of the file, just after any module
      comments and docstrings, and before module globals and constants.
      Imports should be grouped in the following order:

      1. standard library imports
      2. related third party imports
      3. local application/library specific imports

      You should put a blank line between each group of imports.

      Put any relevant __all__ specification after the imports.

    - Relative imports for intra-package imports are highly discouraged.
      Always use the absolute package path for all imports.
      Even now that PEP 328 [7] is fully implemented in Python 2.5,
      its style of explicit relative imports is actively discouraged;
      absolute imports are more portable and usually more readable.

    - When importing a class from a class-containing module, it's usually okay
      to spell this

        from myclass import MyClass
        from foo.bar.yourclass import YourClass

      If this spelling causes local name clashes, then spell them

        import myclass
        import foo.bar.yourclass

      and use "myclass.MyClass" and "foo.bar.yourclass.YourClass"

Naming Conventions

    Continuation lines should align wrapped elements either vertically using
    Python's implicit line joining inside parentheses, brackets and braces, or
    using a hanging indent.  When using a hanging indent the following
    considerations should be applied; there should be no arguments on the
    first line and further indentation should be used to clearly distinguish
    itself as a continuation line.
Naming conventions

    - Use a Py prefix for public functions; never for static
      functions.  The Py_ prefix is reserved for global service
      routines like Py_FatalError; specific groups of routines
      (e.g. specific object type APIs) use a longer prefix,
      e.g. PyString_ for string functions.

    - Public functions and variables use MixedCase with underscores,
      like this: PyObject_GetAttr, Py_BuildValue, PyExc_TypeError.

    - Occasionally an "internal" function has to be visible to the
      loader; we use the _Py prefix for this, e.g.: _PyObject_Dump.

    - Macros should have a MixedCase prefix and then use upper case,
      for example: PyString_AS_STRING, Py_PRINT_RAW.
There are four ways to build an iterative function:

  * create a generator (uses the yield keyword)
  * use a generator expression (genexp)
  * create an iterator (defines __iter__ and __next__ (or
    next in Python 2.x))
  * create a function that Python can iterate over on its own
    (defines __getitem__)

Examples:

# generator
def uc_gen(text):
    for char in text:
        yield char.upper()

# generator expression
def uc_genexp(text):
    return (char.upper() for char in text)

 # iterator protocol
 class uc_iter():
     def __init__(self, text):
         self.text = text
         self.index = 0
     def __iter__(self):
         return self
     def __next__(self):
         try:
             result = self.text[self.index].upper()
         except IndexError:
             raise StopIteration
         self.index += 1
         return result

 # getitem method
 class uc_getitem():
     def __init__(self, text):
         self.text = text
     def __getitem__(self, index):
         result = self.text[index].upper()
         return result
Practically all objects can be compared, tested for truth value, and
converted to a string (with the repr() function or the slightly different str
() function). The latter function is implicitly used when an object is
written by the print() function.
The principal built-in types are numerics, sequences, mappings, files,
classes, instances and exceptions.
You can also use multi-variable assignment to build functions that return
multiple values, simply by returning a tuple of all the values. The caller
can treat it as a tuple, or assign the values to individual variables.
python functions will return a value, or None, the Python null value.
li[1:3] index 1, inclusive, index 3, not inclusive.
li[:] is shorthand for making a complete copy of a list.
li = ['a', 'b', 'c']
li.append(['d', 'e', 'f']) !=li.extend(['d', 'e', 'f'])
boolean datatype: True/False
A tuple is an immutable list.
You can, only, use in to see if an element exists in the tuple.
In effect, tuple freezes a list, and list thaws a tuple.
To instantiate a class, call the class , passing the arguments that the __init__ method defines.
Example 5.18==>class is something like a blue print of its intance, it's tempting but incorect to see it as the "first" instance, from which its instances are coloned.
In general you should have your try...except blocks wrapping as little code as possible.
str.isspace()
'www.example.com'.strip('cmowz.')
; the end of a logical line
If the name of a Python function, class method, or attribute starts with (but
doesn't end with) two underscores, it's private; everything else is public.
Python uses try...except to handle exceptions and raise to generate them.
file.tell()/seek()/read()/close()
With multi-variable assignment and list comprehensions, you can replace the entire for loop with a single statement.
print "\n".join(["%s=%s" % (k, v) for k, v in os.environ.items()])
be caucious to the differences between generator and tuple, and list comprehension.
[2 * n for n in range(50)] == list(2 * n for n in range(50))
Note: a generator will provide performance benefits only if we do not intend to use that set of generated values more than once.
sys.modules[MP3FileInfo.__module__] <module 'fileinfo' from 'fileinfo.pyc'>
os.path.join("c:\\music\\ap", "mahadeva.mp3")
os.path.join(os.path.expanduser("~"), "Python")
(filepath, filename) = os.path.split("c:\\music\\ap\\mahadeva.mp3")
(shortname, extension) = os.path.splitext(filename)
os.listdir("c:\\music\\_singles\\")
isfile/isdir
You'll need to specify all the short flags that do have corresponding long flags first, then all the rest of the short flags.
Andy:wangdian
try:
    p = Publisher.objects.get(name='Apress')
except Publisher.DoesNotExist:
    print "Apress isn't in the database yet."
else:
    print "Apress is in the database."
Publisher.objects.filter(country="U.S.A.").order_by("-name")
Publisher.objects.filter(id=52).update(name='Apress Publishing')
Publisher.objects.all().update(country='USA')
p = Publisher.objects.get(name="O'Reilly")
p.delete()
Publisher.objects.filter(country='USA').delete()
Publisher.objects.all().delete()
ALTER TABLE books_book ALTER COLUMN publication_date DROP NOT NULL;

def display_meta(request):
    values = request.META.items()
    values.sort()
    html = []
    for k, v in values:
        html.append('<tr><td>%s</td><td>%s</td></tr>' % (k, v))
    return HttpResponse('<table>%s</table>' % '\n'.join(html))
As an exercise, see whether you can convert this view to use Django’s
template system instead of hard-coding the HTML. Also try adding request.path
and the other HttpRequest methods from the previous section.
