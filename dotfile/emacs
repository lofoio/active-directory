;;;; Badegg's .emacs file
; Wang Dian
; 12 October 2010
;;c-u M-! cmd insert output at point
;;emacs -batch -f batch-byte-compile filename.el
(server-start)
(add-to-list 'load-path "~/.emacs.d/vendor")
(require 'color-theme)
(color-theme-taming-mr-arneson)
(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(column-number-mode t)
 '(comint-input-ring-file-name "~/.bash_history")
 '(display-time-mode t)
 '(menu-bar-mode t)
 '(show-paren-mode t)
 '(tool-bar-mode nil))
(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(default ((t (:inherit nil :stipple nil :background "black" :foreground "LightSkyBlue" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 241 :width normal :foundry "unknown" :family "WenQuanYi Micro Hei Mono"))))
 '(hl-line ((t (:background "dark blue" :foreground "SkyBlue1"))))
 '(region ((t (:background "dark blue" :foreground "LightSkyBlue4"))))
 '(w3m-form-button ((((type x w32 mac ns) (class color)) (:background "red" :foreground "black" :box (:line-width 2 :style released-button)))))
 '(w3m-form-button-mouse ((((type x w32 mac ns) (class color)) (:background "black" :foreground "blue" :box (:line-width 2 :style released-button)))))
 '(w3m-form-button-pressed ((((type x w32 mac ns) (class color)) (:background "red" :foreground "black" :box (:line-width 2 :style pressed-button)))))
 '(w3m-header-line-location-content ((((class color) (background light)) (:foreground "DarkGoldenrod"))))
 '(w3m-header-line-location-content-face ((t (:foreground "LightGoldenrod"))) t)
 '(w3m-header-line-location-title ((((class color) (background light)) (:foreground "Blue"))))
 '(w3m-header-line-location-title-face ((((class color) (background light)) (:foreground "Blue"))) t)
 '(w3m-history-current-url ((t (:background "red" :foreground "LightSkyBlue"))))
 '(w3m-image-anchor ((((class color) (background light)) (:foreground "red"))))
 '(w3m-tab-background ((((class color)) (:foreground "red"))))
 '(w3m-tab-background-face ((((class color)) (:foreground "green"))) t)
 '(w3m-tab-selected-background ((((class color)) (:foreground "red")))))
(setq inhibit-startup-message t)
(mouse-avoidance-mode 'bannish)
(scroll-bar-mode nil)
(setq fill-column 78)
(setq abbrev-file-name "~/.emacs.d/abbrev_defs")
(setq eshell-aliases-file "~/.emacs.d/eshell/alias")
;;(whitespace-global-mode)
(setq whitespace-style '(tabs trailing))
;; default to better frame titles
(setq frame-title-format
      (concat  "%b - emacs@" (system-name)))
(global-set-key (kbd "C-;") 'uncomment-region)
;;;;start auctex
(load "auctex.el" nil t t)
(load "preview-latex.el" nil t t)
(mapc (lambda (mode)
      (add-hook 'LaTeX-mode-hook mode))
      (list 'LaTeX-math-mode
            'turn-on-reftex
            'linum-mode))
(add-hook 'LaTeX-mode-hook
          (lambda ()
            (setq TeX-auto-untabify t
                  TeX-engine 'xetex
                  TeX-show-compilation t)
            (TeX-global-PDF-mode t)
            (setq TeX-save-query nil)
            (imenu-add-menubar-index)
            (define-key LaTeX-mode-map
              (kbd "TAB") 'TeX-complete-symbol)))


;;;;end
;;;;start
(require 'lyric-mode)
;;(global-set-key "\C-c\C-o" 'lyric-mode-find-file)
(require 'smart-operator)
;;;;end
;;;;;pylookup start
(setq pylookup-dir "~/.emacs.d/vendor/tsgates-pylookup")
(add-to-list 'load-path pylookup-dir)
(eval-when-compile (require 'pylookup))
(setq pylookup-program (concat pylookup-dir "/pylookup.py"))
(setq pylookup-db-file (concat pylookup-dir "/pylookup.db"))
(autoload 'pylookup-lookup "pylookup"
  "Lookup SEARCH-TERM in the Python HTML indexes." t)
(autoload 'pylookup-update "pylookup"
  "Run pylookup-update and create the database at `pylookup-db-file'." t)
(global-set-key "\C-ch" 'pylookup-lookup)
(defun pylookup-w3m-new-session (myurl &optional NEW-SESSION)
(w3m-browse-url myurl t))
(setq browse-url-browser-function 'pylookup-w3m-new-session)
;;;;pylookup end
;; ;;;;pony mode start
;; (add-to-list 'load-path "~/.emacs.d/vendor/pony-mode-0.3")
;; (require 'pony-mode)
;; ;;;;pony mode end
;;;;nxhtml start
(autoload 'django-html-mumamo-mode "~/.emacs.d/vendor/nxhtml/autostart.el")
(setq auto-mode-alist
      (append '(("\\.html?$" . django-html-mumamo-mode))
              auto-mode-alist))
(setq mumamo-background-colors nil)
(add-to-list 'auto-mode-alist '("\\.html$" . django-html-mumamo-mode))
;;;;nxhtml end
;;;;yasnippet start
(add-to-list 'load-path "~/.emacs.d/plugins/yasnippet-e53c41d")
(require 'yasnippet)
;;Attention: a snippet causes confusion if it has a key without a value
;;to-do-list: yas/fallback-behavior?
(yas/initialize)
(setq yas/root-directory '("~/.emacs.d/plugins/yasnippet-e53c41d/snippets"))
(mapc 'yas/load-directory yas/root-directory)
(global-set-key "\C-c\C-a" 'yas/insert-snippet)
;;;;yasnippet end
;; ;;;;python-mode start
;; (add-to-list 'load-path "~/.emacs.d/vendor/python-mode.el-6.0.3")
;; (require 'python-mode)
;; (require 'lambda-mode)
;; (add-hook 'python-mode-hook #'lambda-mode 1)
;; (setq lambda-symbol (string (make-char 'greek-iso8859-7 107)))
;; ;; (add-hook 'python-mode-hook
;; ;;           #'(lambda ()
;; ;;               (push '(?' . ?')
;; ;;                     (getf autopair-extra-pairs :code))
;; ;;               (setq autopair-handle-action-fns
;; ;;                     (list #'autopair-default-handle-action
;; ;;                           #'autopair-python-triple-quote-action))))
;; ;;(autoload 'autopair-global-mode "autopair" nil t)
;; ;;(autopair-global-mode)
;; ;;;;python-mode end
;;;;python checker start
(setq python-check-command "pyflakes")
;;;;something wrong with the setting below, show a warning
;;(add-hook 'find-file-hook 'flymake-find-file-hook)
(add-hook 'find-file-hook
      '(lambda ()
         (whitespace-mode)
         ))

(when (load "flymake" t)
  (defun flymake-pyflakes-init ()
    (let* ((temp-file (flymake-init-create-temp-buffer-copy
                       'flymake-create-temp-inplace))
           (local-file (file-relative-name
                        temp-file
                        (file-name-directory buffer-file-name))))
      (list "pycheckers"  (list local-file))))
  (add-to-list 'flymake-allowed-file-name-masks
               '("\\.py\\'" flymake-pyflakes-init)))
(load-library "flymake-cursor")
(global-set-key [f8] 'flymake-goto-prev-error)
(global-set-key [f9] 'flymake-goto-next-error)
;;;;python checker end
;;;;pymacs start
;; (add-to-list 'load-path "~/.emacs.d/vendor/pymacs-0.24-beta2")
;; (require 'pymacs)
;; (pymacs-load "ropemacs" "rope-")
;; (setq ropemacs-enable-autoimport t)
;;;;pymacs end
;;;;auto-complete start
(add-to-list 'load-path "~/.emacs.d/vendor/auto-complete-1.3.1")
(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories
             "~/.emacs.d/vendor/auto-complete-1.3.1/dict")
(ac-config-default)
(set-face-background 'ac-candidate-face "dim gray")
(set-face-foreground 'ac-selection-face "black")
;;;;auto-complete end
;;;;ibus start
(require 'ibus)
(global-set-key (kbd "C-M-;") 'ibus-mode)
;; Use C-SPC for Set Mark command
(ibus-define-common-key ?\C-\s nil)
;; Use C-/ for Undo command
(ibus-define-common-key ?\C-/ nil)
;; Change cursor color depending on IBus status
(setq ibus-cursor-color '("red" "blue" "limegreen"))
;; use C-; to toggle IBus
(global-set-key [(control \;)] 'ibus-toggle)
;; Enable C-; key only for preediting
(ibus-define-common-key [(control \;)] nil)
(ibus-define-preedit-key [(control \;)] t)
;;;;ibus end
;;;;golang start
(require 'go-mode-load)
(require 'go-autocomplete)
(require 'auto-complete-config)
;;;;golang end
(global-unset-key [f10])
(global-unset-key (kbd "C-\\"))
;;(global-set-key (kbd "C-\\") 'kmacro-end-and-call-macro)
(global-set-key (kbd "M-9") 'kmacro-start-macro)
(global-set-key (kbd "M-0") 'kmacro-end-macro)
(global-unset-key (kbd "C-Z"))
(setq view-read-only t)
(setq bookmark-save-flag 1)
;; (add-hook 'lisp-mode-hook
;;           #'(lambda () (setq autopair-dont-activate t)))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(mapcar
 (lambda (setting)
   (setq auto-mode-alist
         (cons setting auto-mode-alist)))
 '(
   ("bash" . sh-mode)
   ))
(setq abbrev-mode t)
(setq default-major-mode 'text-mode)
(global-font-lock-mode t)
(setq user-mail-address "roover.wd@gmail.com")
(setq user-full-name "Andy Wang")
;; No end a file with a newline
(setq require-final-newline nil)
;; Stop at the end of the file, not just add lines
(setq next-line-add-newlines nil)
(setq ring-bell-function nil)
(setq visible-bell nil)
(setq kill-ring-max 200)
(setq sentence-end "\\([。，！？；：]\\|……\\|[.,?;:!][]\"')}]*\\($\\|[ \t]\\)\\)[ \t\n]*")
(setq sentence-end-double-space nil)
(setq enable-recursive-minibuffers t)
(defun toggle-fullscreen (&optional f)
  (interactive)
  (let ((current-value (frame-parameter nil 'fullscreen)))
    (set-frame-parameter nil 'fullscreen
             (if (equal 'fullboth current-value)
                 (if (boundp 'old-fullscreen) old-fullscreen nil)
               (progn (setq old-fullscreen current-value)
                  'fullboth)))))
(global-set-key [f11] 'toggle-fullscreen)
(defun smart-beginning-of-line ()
  "If point was already at that position,
   move point to beginning of line."
  (interactive "^")
  (let ((oldpos (point)))
    (back-to-indentation)
    (and (= oldpos (point))
         (beginning-of-line))))
(global-set-key [home] 'smart-beginning-of-line)
(auto-image-file-mode t)
;;open disabled functions
(put 'set-goal-column 'disabled nil)
(put 'narrow-to-region 'disabled nil)
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)
(put 'LaTeX-hide-environment 'disabled nil)
;;让 dired 可以递归的拷贝和删除目录
(setq dired-recursive-copies 'top)
(setq dired-recursive-deletes 'top)
;; use clipboard
(setq x-select-enable-clipboard t)
(setq confirm-kill-emacs 'yes-or-no-p)
(global-set-key "\M- " 'hippie-expand)
(setq hippie-expand-try-functions-list
      '(
        yas/hippie-try-expand
        try-expand-dabbrev-visible
        try-expand-dabbrev
        try-expand-dabbrev-all-buffers
        try-expand-dabbrev-from-kill
        try-complete-file-name-partially
        try-complete-file-name
        try-expand-all-abbrevs
        try-expand-list
        try-expand-line
        try-complete-lisp-symbol-partially
        try-complete-lisp-symbol))
(defmacro wcy-define-2bind-transient-mode
  (funname cmd-mark-active cmd-mark-no-active)
  `(defun ,funname ()
     (interactive)
     (if mark-active
         (call-interactively ,cmd-mark-active)
       (call-interactively ,cmd-mark-no-active))))
(global-set-key "\C-w"
                'wcy-backward-kill-word-or-kill-region)
(wcy-define-2bind-transient-mode
 wcy-backward-kill-word-or-kill-region
 'kill-region
 'backward-kill-word)
(setq search-whitespace-regexp "[ \t\r\n]+")
(require 'jka-compr)
(require 'iswitchb)
(iswitchb-mode)
;;c-h k for more details or c-h f iswitchb
(global-set-key "\M-\C-]" 'enlarge-window-horizontally)
(global-set-key "\M-\C-[" 'shrink-window-horizontally)
(global-set-key (kbd "C-M-^") 'enlarge-window)
(require 'ibuffer)
(global-set-key (kbd "C-x C-b") 'ibuffer)
(global-set-key (kbd "ESC 4") 'kill-buffer)
(global-set-key (kbd "ESC 1") 'delete-other-windows)
(global-set-key (kbd "ESC o") 'other-window)
(global-set-key [(control f5)] 'shell-resync-dirs)
(global-set-key [f12] 'toggle-truncate-lines)
(global-set-key [(control @)] 'set-mark-command)
(global-set-key [(meta left)] 'backward-sexp)
(global-set-key [(meta right)] 'forward-sexp)
(global-set-key [(meta g)] 'goto-line)
(global-set-key [f6] 'dired-jump)
(global-set-key (kbd "C-x f") 'find-file-at-point)
(global-set-key (kbd "C-x C-j")
                (lambda ()
                  (interactive)
                  (if (buffer-file-name)
                      (dired default-directory))))
(add-hook 'iswitchb-make-buflist-hook 'iswitchb-summaries-to-end)
(defun quick-tri-sansw3m ()
  "switch between three buffers"
  (interactive)
  (iswitchb-make-buflist nil)
  (if (or (string-match "\\*w3m\\*"
                        (buffer-name (current-buffer)))
          (string-match "\\*w3m\\*"
                        (buffer-name (other-buffer))))
      (dolist (elem (cdr iswitchb-buflist))
        (unless (string-match "\\*w3m\\*" elem)
          (switch-to-buffer elem)
          (return)))
    (switch-to-buffer (nth 1 iswitchb-buflist))))
(defun quick-bi-sansw3m ()
  "switch between buffers, except w3m buffers"
  (interactive)
  (iswitchb-make-buflist nil)
  (if (and (string-match "\\*w3m\\*"
                         (buffer-name (current-buffer)))
           (string-match "\\*w3m\\*"
                         (buffer-name (other-buffer))))
      (dolist (elem iswitchb-buflist)
        (unless (string-match "\\*w3m\\*" elem)
          (switch-to-buffer elem)
          (return)))
    (switch-to-buffer nil)))
(global-set-key [(control return)] 'quick-bi-sansw3m)
(global-set-key (kbd "ESC RET") 'quick-tri-sansw3m)
(global-set-key (kbd "ESC n")
        (lambda ()
          (interactive)
          (scroll-up 1)))
(global-set-key (kbd "ESC p")
        (lambda ()
          (interactive)
          (scroll-down 1)))
(global-set-key (kbd "ESC 5")
        (lambda ()
          (interactive)
          (kill-new (buffer-file-name (current-buffer)))
          (message  (buffer-file-name (current-buffer)))))
(fset 'yes-or-no-p 'y-or-n-p)
;;backup files
(setq make-backup-files t
      version-control t
      delete-old-versions t
      kept-new-versions 6
      kept-old-versions 2
      dired-kept-versions 1
      backup-by-copying t
      backup-directory-alist '(("." . "~/.emacs.d/backup-dirs")))
;;auto-save-file-name-transforms '((".*" "~/backup-dirs/\\1" t)
;;(("\\`/[^/]*:\\([^/]*/\\)*\\([^/]*\\)\\'" "/tmp/\\2" t))
;;(setq backup-by-copying-when-linked t)
(setq w3m-use-cookies t)
(load "kidsdcvtobuffer")
(load "searchandvoice")
(global-set-key (kbd "C-c d") 'kid-sdcv-to-buffer)
;;search and pronounce
(global-set-key (kbd "C-c v") 'search-voice)
;; indent key bindings M-^ C-M-o M-m
(setq default-tab-width 4)
(setq-default indent-tabs-mode nil)
;; CC-mode  http://cc-mode.sourceforge.net/
;; c-h v to see c-default-style
(add-hook 'w3m-mode-hook
          '(lambda ()
             (local-unset-key "\M-n")
             (define-key w3m-mode-map "g"
               'w3m-goto-url-new-session)
             (define-key w3m-mode-map "\C-u"
               'w3m-previous-anchor)
             (define-key w3m-mode-map "G"
               'w3m-goto-url)))
(add-hook 'django-mode-hook
          '(lambda ()
             (setq comment-start "{#")
             (setq comment-end "#")))
(add-hook 'python-mode-hook
      '(lambda ()
;;         (local-unset-key "\C-j")
         (smart-operator-mode)
         (flymake-find-file-hook)
         ))
(add-hook 'c-mode-common-hook
      '(lambda ()
         (auto-fill-mode 1)
         (smart-operator-mode)
         (c-toggle-auto-hungry-state 1)
         ))
(add-hook 'f90-mode-hook
      '(lambda ()
;;         (local-unset-key "\C-j") ;;C must capital ?
         (local-set-key "\r" 'f90-indent-new-line)
(auto-fill-mode 1)
         (abbrev-mode 1)
         ))
;;make shell/ipython- mode display colors other than [m[x
(add-hook 'comint-mode-hook 'ansi-color-for-comint-mode-on)
(add-hook 'shell-mode-hook
      '(lambda ()
         (local-set-key " " 'comint-magic-space)
         ))
(add-hook 'eshell-mode-hook
      '(lambda ()
;;         (local-unset-key "\C-j") ;;C must capital ?
         ))
(add-hook 'latex-mode-hook
      '(lambda ()
         (local-unset-key "\C-j")
         ))
(add-hook 'lisp-mode-hook
      '(lambda ()
;;         (local-unset-key "\C-j")
         ))
;; (mapcar
;;  (lambda (setting)
;;    (setq auto-mode-alist
;;          (cons setting auto-mode-alist)))
;;    ("\\.rdf$".  sgml-mode)
;;    ("\\.session" . emacs-lisp-mode)
;;    ("\\.css$" . css-mode)
;;    ("\\.gnus$" . emacs-lisp-mode)
;;    ("\\.[Ff]90$" . f90-mode)
;;    ("\\.l$" . c-mode)
;;    ("\\.h\\'" . c-mode)
;;    ("[Mm]akefile"  . makefile-mode)
;;    ("\\.idl$" . idl-mode)
;;    ))
;;gdb tips
;;file (some.f90) | break (line #) | print (variable) | run | continue
;; .emacs

;;; uncomment this line to disable loading of "default.el" at startup
;; (setq inhibit-default-init t)

;; enable visual feedback on selections
;(setq transient-mark-mode t)
;; default to unified diffs
;;(setq diff-switches "-u")

;; always end a file with a newline
;(setq require-final-newline 'query)

;;; uncomment for CJK utf-8 support for non-Asian users
;; (require 'un-define)
;; (shell-quote-argument "foo > bar")
;;      => "foo\\ \\>\\ bar"
;;;;ESPEAK
;;(defvar  dtk-program "espeak")
;;(load-file "/usr/share/emacs/site-lisp/emacspeak/lisp/emacspeak-setup.el")
;;(global-voice-lock-mode t)
;;;;Help
;; c-h l view lossage
;;;;info tips
;;info menu in $PREFIX/info/dir
;; p previous node
;; l old node
;; r return from old node
;; u upper node
;; i idex topics
;;;;coding,details for c-h a coding
;;c-x return f/r
;;;;abbrev-mode
;;m-x abbrev-mode #auto expand for c-x a e
;;c-m f
;;c-x a e
;;c-m b
;;;;chmod root permission
;;e /sudo::/boot/grub/menu.list
;;;;regular expression
;;M-x replace-regexp \[[0-9:.]+\]$  ~~  [02:15:51.393]
;;egrep option 'regexp' file1 file2
;;-i ingore cases
;;[0-9A-Z_!.?] [^w] ^w
;;()多选结构 ()|() {n,m} range n-m
;;regrx is greedy. --.*?---  sometimes not greedy(grep -P)
;;;;search and replace
;; replace-
;; isearch-forward
;;;;bookmarks
;;c-x r m add a new item
;;c-x r b jump to some item
;; M-x list-bookmarks
;;;;calc
;;;;conditionals ref: info elisp 10.2
;; (when CONDITION A B C)   equivalent to (if CONDITION (progn A B C) nil)
;; (unless CONDITION A B C) equivalent to (if CONDITION nil A B C)
;;
;;;;view-mode c-x c-q toggle between read-only and not
;;python ide key-bindings
;;;; M-;<c-c #> comment,
;; (setq browse-url-default-browser 'w3m-browse-url)
(add-hook 'before-save-hook 'delete-trailing-whitespace)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;desktop at last
;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(desktop-save-mode t)
(desktop-load-default)
